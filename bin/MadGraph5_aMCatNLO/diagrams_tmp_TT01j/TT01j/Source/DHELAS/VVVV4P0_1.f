C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     -2*Epsilon(1,2,3,4)*P(-1,1)*P(-1,3) - 2*Epsilon(1,2,3,4)*P(-1,2)*
C     P(-1,4) + 2*Epsilon(2,3,4,-1)*P(-1,4)*P(1,2) -
C      2*Epsilon(2,3,4,-1)*P(-1,1)*P(1,3) + 2*Epsilon(2,3,4,-1)*P(-1,2)
C     *P(1,4) - 2*Epsilon(1,3,4,-1)*P(-1,3)*P(2,1) -
C      2*Epsilon(1,3,4,-1)*P(-1,1)*P(2,3) + 2*Epsilon(1,3,4,-1)*P(-1,2)
C     *P(2,4) - 2*Epsilon(1,2,4,-1)*P(-1,3)*P(3,1) +
C      2*Epsilon(1,2,4,-1)*P(-1,4)*P(3,2) + 2*Epsilon(1,2,4,-1)*P(-1,2)
C     *P(3,4) - 2*Epsilon(1,2,3,-1)*P(-1,3)*P(4,1) +
C      2*Epsilon(1,2,3,-1)*P(-1,4)*P(4,2) - 2*Epsilon(1,2,3,-1)*P(-1,1)
C     *P(4,3) + Epsilon(3,4,-1,-2)*P(-2,3)*P(-1,1)*Metric(1,2) -
C      Epsilon(3,4,-1,-2)*P(-2,4)*P(-1,2)*Metric(1,2) -
C      Epsilon(3,4,-1,-2)*P(-2,1)*P(-1,3)*Metric(1,2) +
C      Epsilon(3,4,-1,-2)*P(-2,2)*P(-1,4)*Metric(1,2) +
C      Epsilon(2,4,-1,-2)*P(-2,3)*P(-1,1)*Metric(1,3) -
C      Epsilon(2,4,-1,-2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*Metric(1,4) +
C      Epsilon(2,3,-1,-2)*P(-2,4)*P(-1,2)*Metric(1,4) -
C      Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,3)*Metric(1,4) -
C      Epsilon(2,3,-1,-2)*P(-2,2)*P(-1,4)*Metric(1,4) +
C      Epsilon(1,4,-1,-2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,4,-1,-2)*P(-2,4)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,4,-1,-2)*P(-2,1)*P(-1,3)*Metric(2,3) -
C      Epsilon(1,4,-1,-2)*P(-2,2)*P(-1,4)*Metric(2,3) +
C      Epsilon(1,3,-1,-2)*P(-2,4)*P(-1,2)*Metric(2,4) -
C      Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,4)*Metric(2,4) -
C      Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*Metric(3,4) +
C      Epsilon(1,2,-1,-2)*P(-2,4)*P(-1,2)*Metric(3,4) +
C      Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*Metric(3,4) -
C      Epsilon(1,2,-1,-2)*P(-2,2)*P(-1,4)*Metric(3,4)
C     
      SUBROUTINE VVVV4P0_1(V2, V3, V4, COUP, M1, W1,V1)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 TMP61
      COMPLEX*16 TMP36
      COMPLEX*16 TMP56
      REAL*8 P3(0:3)
      REAL*8 W1
      COMPLEX*16 TMP32
      COMPLEX*16 TMP64
      COMPLEX*16 TMP52
      COMPLEX*16 TMP25
      COMPLEX*16 TMP48
      COMPLEX*16 TMP60
      COMPLEX*16 V3(*)
      COMPLEX*16 TMP37
      COMPLEX*16 TMP57
      REAL*8 P2(0:3)
      COMPLEX*16 TMP33
      COMPLEX*16 TMP53
      COMPLEX*16 TMP24
      COMPLEX*16 TMP49
      COMPLEX*16 V2(*)
      COMPLEX*16 TMP34
      COMPLEX*16 TMP58
      REAL*8 P1(0:3)
      COMPLEX*16 TMP23
      COMPLEX*16 TMP54
      COMPLEX*16 DENOM
      COMPLEX*16 TMP27
      REAL*8 P4(0:3)
      COMPLEX*16 TMP62
      COMPLEX*16 V1(6)
      COMPLEX*16 TMP35
      COMPLEX*16 TMP59
      REAL*8 M1
      COMPLEX*16 TMP55
      COMPLEX*16 V4(*)
      COMPLEX*16 TMP63
      COMPLEX*16 TMP40
      COMPLEX*16 COUP
      COMPLEX*16 TMP28
      P2(0) = DBLE(V2(1))
      P2(1) = DBLE(V2(2))
      P2(2) = DIMAG(V2(2))
      P2(3) = DIMAG(V2(1))
      P3(0) = DBLE(V3(1))
      P3(1) = DBLE(V3(2))
      P3(2) = DIMAG(V3(2))
      P3(3) = DIMAG(V3(1))
      P4(0) = DBLE(V4(1))
      P4(1) = DBLE(V4(2))
      P4(2) = DIMAG(V4(2))
      P4(3) = DIMAG(V4(1))
      V1(1) = +V2(1)+V3(1)+V4(1)
      V1(2) = +V2(2)+V3(2)+V4(2)
      P1(0) = -DBLE(V1(1))
      P1(1) = -DBLE(V1(2))
      P1(2) = -DIMAG(V1(2))
      P1(3) = -DIMAG(V1(1))
      TMP24 = (V3(3)*P2(0)-V3(4)*P2(1)-V3(5)*P2(2)-V3(6)*P2(3))
      TMP25 = (P1(0)*V2(3)-P1(1)*V2(4)-P1(2)*V2(5)-P1(3)*V2(6))
      TMP40 = (V3(3)*V4(3)-V3(4)*V4(4)-V3(5)*V4(5)-V3(6)*V4(6))
      TMP27 = (P3(0)*V2(3)-P3(1)*V2(4)-P3(2)*V2(5)-P3(3)*V2(6))
      TMP23 = (V3(3)*P1(0)-V3(4)*P1(1)-V3(5)*P1(2)-V3(6)*P1(3))
      TMP60 = (-1D0)*(P1(0)*(P3(1)*(V4(6)*V2(5)-V4(5)*V2(6))+(P3(2)
     $ *(V4(4)*V2(6)-V4(6)*V2(4))+P3(3)*(V4(5)*V2(4)-V4(4)*V2(5))))
     $ +(P1(1)*(P3(0)*(V4(5)*V2(6)-V4(6)*V2(5))+(P3(2)*(V4(6)*V2(3)
     $ -V4(3)*V2(6))+P3(3)*(V4(3)*V2(5)-V4(5)*V2(3))))+(P1(2)*(P3(0)
     $ *(V4(6)*V2(4)-V4(4)*V2(6))+(P3(1)*(V4(3)*V2(6)-V4(6)*V2(3))
     $ +P3(3)*(V4(4)*V2(3)-V4(3)*V2(4))))+P1(3)*(P3(0)*(V4(4)*V2(5)
     $ -V4(5)*V2(4))+(P3(1)*(V4(5)*V2(3)-V4(3)*V2(5))+P3(2)*(V4(3)
     $ *V2(4)-V4(4)*V2(3)))))))
      TMP61 = (-1D0)*(P1(0)*(P3(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P3(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P3(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P3(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P3(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P3(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P3(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P3(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P3(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P3(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP48 = (P3(0)*P1(0)-P3(1)*P1(1)-P3(2)*P1(2)-P3(3)*P1(3))
      TMP49 = (P2(0)*P4(0)-P2(1)*P4(1)-P2(2)*P4(2)-P2(3)*P4(3))
      TMP64 = (-1D0)*(P2(0)*(P4(1)*(V3(6)*V2(5)-V3(5)*V2(6))+(P4(2)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+P4(3)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P2(1)*(P4(0)*(V3(5)*V2(6)-V3(6)*V2(5))+(P4(2)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+P4(3)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P2(2)*(P4(0)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(P4(1)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +P4(3)*(V3(4)*V2(3)-V3(3)*V2(4))))+P2(3)*(P4(0)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(P4(1)*(V3(5)*V2(3)-V3(3)*V2(5))+P4(2)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP58 = (-1D0)*(P2(0)*(P4(1)*(V3(5)*V4(6)-V3(6)*V4(5))+(P4(2)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+P4(3)*(V3(4)*V4(5)-V3(5)*V4(4))))
     $ +(P2(1)*(P4(0)*(V3(6)*V4(5)-V3(5)*V4(6))+(P4(2)*(V3(3)*V4(6)
     $ -V3(6)*V4(3))+P4(3)*(V3(5)*V4(3)-V3(3)*V4(5))))+(P2(2)*(P4(0)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+(P4(1)*(V3(6)*V4(3)-V3(3)*V4(6))
     $ +P4(3)*(V3(3)*V4(4)-V3(4)*V4(3))))+P2(3)*(P4(0)*(V3(5)*V4(4)
     $ -V3(4)*V4(5))+(P4(1)*(V3(3)*V4(5)-V3(5)*V4(3))+P4(2)*(V3(4)
     $ *V4(3)-V3(3)*V4(4)))))))
      TMP62 = (-1D0)*(P2(0)*(P4(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P4(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P4(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P2(1)*(P4(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P4(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P4(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P2(2)*(P4(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P4(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P4(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P2(3)*(P4(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P4(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P4(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP53 = (-1D0)*(P1(0)*(V2(4)*(V3(5)*V4(6)-V3(6)*V4(5))+(V2(5)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+V2(6)*(V3(4)*V4(5)-V3(5)*V4(4))))
     $ +(P1(1)*(V2(3)*(V3(6)*V4(5)-V3(5)*V4(6))+(V2(5)*(V3(3)*V4(6)
     $ -V3(6)*V4(3))+V2(6)*(V3(5)*V4(3)-V3(3)*V4(5))))+(P1(2)*(V2(3)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+(V2(4)*(V3(6)*V4(3)-V3(3)*V4(6))
     $ +V2(6)*(V3(3)*V4(4)-V3(4)*V4(3))))+P1(3)*(V2(3)*(V3(5)*V4(4)
     $ -V3(4)*V4(5))+(V2(4)*(V3(3)*V4(5)-V3(5)*V4(3))+V2(5)*(V3(4)
     $ *V4(3)-V3(3)*V4(4)))))))
      TMP52 = (-1D0)*(P4(0)*(V2(4)*(V3(5)*V4(6)-V3(6)*V4(5))+(V2(5)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+V2(6)*(V3(4)*V4(5)-V3(5)*V4(4))))
     $ +(P4(1)*(V2(3)*(V3(6)*V4(5)-V3(5)*V4(6))+(V2(5)*(V3(3)*V4(6)
     $ -V3(6)*V4(3))+V2(6)*(V3(5)*V4(3)-V3(3)*V4(5))))+(P4(2)*(V2(3)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+(V2(4)*(V3(6)*V4(3)-V3(3)*V4(6))
     $ +V2(6)*(V3(3)*V4(4)-V3(4)*V4(3))))+P4(3)*(V2(3)*(V3(5)*V4(4)
     $ -V3(4)*V4(5))+(V2(4)*(V3(3)*V4(5)-V3(5)*V4(3))+V2(5)*(V3(4)
     $ *V4(3)-V3(3)*V4(4)))))))
      TMP55 = (-1D0)*(P1(0)*(P3(1)*(V3(6)*V4(5)-V3(5)*V4(6))+(P3(2)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+P3(3)*(V3(5)*V4(4)-V3(4)*V4(5))))
     $ +(P1(1)*(P3(0)*(V3(5)*V4(6)-V3(6)*V4(5))+(P3(2)*(V3(6)*V4(3)
     $ -V3(3)*V4(6))+P3(3)*(V3(3)*V4(5)-V3(5)*V4(3))))+(P1(2)*(P3(0)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+(P3(1)*(V3(3)*V4(6)-V3(6)*V4(3))
     $ +P3(3)*(V3(4)*V4(3)-V3(3)*V4(4))))+P1(3)*(P3(0)*(V3(4)*V4(5)
     $ -V3(5)*V4(4))+(P3(1)*(V3(5)*V4(3)-V3(3)*V4(5))+P3(2)*(V3(3)
     $ *V4(4)-V3(4)*V4(3)))))))
      TMP54 = (-1D0)*(P2(0)*(V2(4)*(V3(5)*V4(6)-V3(6)*V4(5))+(V2(5)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+V2(6)*(V3(4)*V4(5)-V3(5)*V4(4))))
     $ +(P2(1)*(V2(3)*(V3(6)*V4(5)-V3(5)*V4(6))+(V2(5)*(V3(3)*V4(6)
     $ -V3(6)*V4(3))+V2(6)*(V3(5)*V4(3)-V3(3)*V4(5))))+(P2(2)*(V2(3)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+(V2(4)*(V3(6)*V4(3)-V3(3)*V4(6))
     $ +V2(6)*(V3(3)*V4(4)-V3(4)*V4(3))))+P2(3)*(V2(3)*(V3(5)*V4(4)
     $ -V3(4)*V4(5))+(V2(4)*(V3(3)*V4(5)-V3(5)*V4(3))+V2(5)*(V3(4)
     $ *V4(3)-V3(3)*V4(4)))))))
      TMP57 = (-1D0)*(P1(0)*(P3(1)*(V3(5)*V4(6)-V3(6)*V4(5))+(P3(2)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+P3(3)*(V3(4)*V4(5)-V3(5)*V4(4))))
     $ +(P1(1)*(P3(0)*(V3(6)*V4(5)-V3(5)*V4(6))+(P3(2)*(V3(3)*V4(6)
     $ -V3(6)*V4(3))+P3(3)*(V3(5)*V4(3)-V3(3)*V4(5))))+(P1(2)*(P3(0)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+(P3(1)*(V3(6)*V4(3)-V3(3)*V4(6))
     $ +P3(3)*(V3(3)*V4(4)-V3(4)*V4(3))))+P1(3)*(P3(0)*(V3(5)*V4(4)
     $ -V3(4)*V4(5))+(P3(1)*(V3(3)*V4(5)-V3(5)*V4(3))+P3(2)*(V3(4)
     $ *V4(3)-V3(3)*V4(4)))))))
      TMP56 = (-1D0)*(P2(0)*(P4(1)*(V3(6)*V4(5)-V3(5)*V4(6))+(P4(2)
     $ *(V3(4)*V4(6)-V3(6)*V4(4))+P4(3)*(V3(5)*V4(4)-V3(4)*V4(5))))
     $ +(P2(1)*(P4(0)*(V3(5)*V4(6)-V3(6)*V4(5))+(P4(2)*(V3(6)*V4(3)
     $ -V3(3)*V4(6))+P4(3)*(V3(3)*V4(5)-V3(5)*V4(3))))+(P2(2)*(P4(0)
     $ *(V3(6)*V4(4)-V3(4)*V4(6))+(P4(1)*(V3(3)*V4(6)-V3(6)*V4(3))
     $ +P4(3)*(V3(4)*V4(3)-V3(3)*V4(4))))+P2(3)*(P4(0)*(V3(4)*V4(5)
     $ -V3(5)*V4(4))+(P4(1)*(V3(5)*V4(3)-V3(3)*V4(5))+P4(2)*(V3(3)
     $ *V4(4)-V3(4)*V4(3)))))))
      TMP59 = (-1D0)*(P1(0)*(P3(1)*(V4(5)*V2(6)-V4(6)*V2(5))+(P3(2)
     $ *(V4(6)*V2(4)-V4(4)*V2(6))+P3(3)*(V4(4)*V2(5)-V4(5)*V2(4))))
     $ +(P1(1)*(P3(0)*(V4(6)*V2(5)-V4(5)*V2(6))+(P3(2)*(V4(3)*V2(6)
     $ -V4(6)*V2(3))+P3(3)*(V4(5)*V2(3)-V4(3)*V2(5))))+(P1(2)*(P3(0)
     $ *(V4(4)*V2(6)-V4(6)*V2(4))+(P3(1)*(V4(6)*V2(3)-V4(3)*V2(6))
     $ +P3(3)*(V4(3)*V2(4)-V4(4)*V2(3))))+P1(3)*(P3(0)*(V4(5)*V2(4)
     $ -V4(4)*V2(5))+(P3(1)*(V4(3)*V2(5)-V4(5)*V2(3))+P3(2)*(V4(4)
     $ *V2(3)-V4(3)*V2(4)))))))
      TMP28 = (V3(3)*V2(3)-V3(4)*V2(4)-V3(5)*V2(5)-V3(6)*V2(6))
      TMP63 = (-1D0)*(P1(0)*(P3(1)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+P3(3)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(P3(0)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+P3(3)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(P3(0)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(P3(1)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +P3(3)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(P3(0)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(P3(1)*(V3(5)*V2(3)-V3(3)*V2(5))+P3(2)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP33 = (V3(3)*P4(0)-V3(4)*P4(1)-V3(5)*P4(2)-V3(6)*P4(3))
      TMP32 = (P1(0)*V4(3)-P1(1)*V4(4)-P1(2)*V4(5)-P1(3)*V4(6))
      TMP37 = (V4(3)*V2(3)-V4(4)*V2(4)-V4(5)*V2(5)-V4(6)*V2(6))
      TMP36 = (P2(0)*V4(3)-P2(1)*V4(4)-P2(2)*V4(5)-P2(3)*V4(6))
      TMP35 = (P4(0)*V2(3)-P4(1)*V2(4)-P4(2)*V2(5)-P4(3)*V2(6))
      TMP34 = (P3(0)*V4(3)-P3(1)*V4(4)-P3(2)*V4(5)-P3(3)*V4(6))
      DENOM = COUP/(P1(0)**2-P1(1)**2-P1(2)**2-P1(3)**2 - M1 * (M1 -CI
     $ * W1))
      V1(3)= DENOM*(-CI)*(V2(4)*(V3(5)*(V4(6)*(-2D0)*(TMP48+TMP49)+(
     $ +2D0*(P4(3)*TMP36)-2D0*(P3(3)*TMP32+P1(3)*TMP34)))+(V3(6)*(V4(5)
     $ *2D0*(TMP48+TMP49)+(+2D0*(P3(2)*TMP32+P1(2)*TMP34)-2D0*(P4(2)
     $ *TMP36)))+(TMP40*2D0*(P3(2)*P1(3)+P2(2)*P4(3)-P3(3)*P1(2)-P2(3)
     $ *P4(2))+(V4(5)*2D0*(P4(3)*TMP24+P2(3)*TMP33-P3(3)*TMP23)-2D0
     $ *(V4(6)*(P4(2)*TMP24+P2(2)*TMP33-P3(2)*TMP23))))))+(V2(5)*(V3(4)
     $ *(V4(6)*2D0*(TMP48+TMP49)+(+2D0*(P3(3)*TMP32+P1(3)*TMP34)-2D0
     $ *(P4(3)*TMP36)))+(V3(6)*(V4(4)*(-2D0)*(TMP48+TMP49)+(+2D0*(P4(1)
     $ *TMP36)-2D0*(P3(1)*TMP32+P1(1)*TMP34)))+(TMP40*2D0*(P3(3)*P1(1)
     $ +P2(3)*P4(1)-P3(1)*P1(3)-P2(1)*P4(3))+(V4(4)*(-2D0)*(P4(3)
     $ *TMP24+P2(3)*TMP33-P3(3)*TMP23)+2D0*(V4(6)*(P4(1)*TMP24+P2(1)
     $ *TMP33-P3(1)*TMP23))))))+(V2(6)*(V3(4)*(V4(5)*(-2D0)*(TMP48
     $ +TMP49)+(+2D0*(P4(2)*TMP36)-2D0*(P3(2)*TMP32+P1(2)*TMP34)))
     $ +(V3(5)*(V4(4)*2D0*(TMP48+TMP49)+(+2D0*(P3(1)*TMP32+P1(1)*TMP34)
     $ -2D0*(P4(1)*TMP36)))+(TMP40*2D0*(P3(1)*P1(2)+P2(1)*P4(2)-P3(2)
     $ *P1(1)-P2(2)*P4(1))+(V4(4)*2D0*(P4(2)*TMP24+P2(2)*TMP33-P3(2)
     $ *TMP23)-2D0*(V4(5)*(P4(1)*TMP24+P2(1)*TMP33-P3(1)*TMP23))))))
     $ +(TMP28*(V4(4)*2D0*(P3(3)*P1(2)+P2(2)*P4(3)-P3(2)*P1(3)-P2(3)
     $ *P4(2))+(V4(5)*2D0*(P3(1)*P1(3)+P2(3)*P4(1)-P3(3)*P1(1)-P2(1)
     $ *P4(3))+2D0*(V4(6)*(P3(2)*P1(1)+P2(1)*P4(2)-P3(1)*P1(2)-P2(2)
     $ *P4(1)))))+(V3(4)*(V4(5)*(-2D0)*(P3(3)*TMP25+P1(3)*TMP27-P2(3)
     $ *TMP35)+(V4(6)*2D0*(P3(2)*TMP25+P1(2)*TMP27-P2(2)*TMP35)+2D0
     $ *(TMP37*(P2(2)*P4(3)-P2(3)*P4(2)))))+(V3(5)*(V4(4)*2D0*(P3(3)
     $ *TMP25+P1(3)*TMP27-P2(3)*TMP35)+(V4(6)*(-2D0)*(P3(1)*TMP25+P1(1)
     $ *TMP27-P2(1)*TMP35)+2D0*(TMP37*(P2(3)*P4(1)-P2(1)*P4(3)))))
     $ +(V3(6)*(V4(4)*(-2D0)*(P3(2)*TMP25+P1(2)*TMP27-P2(2)*TMP35)
     $ +(V4(5)*2D0*(P3(1)*TMP25+P1(1)*TMP27-P2(1)*TMP35)+2D0*(TMP37
     $ *(P2(1)*P4(2)-P2(2)*P4(1)))))+(V2(3)*(TMP55+TMP58-TMP56-TMP57)
     $ +(V4(3)*(TMP61+TMP62-TMP63-TMP64)+(V3(3)*(TMP59-TMP60)+(+2D0
     $ *(P2(0)*TMP52+P4(0)*TMP54)-2D0*(P3(0)*TMP53))))))))))))
      V1(4)= DENOM*CI*(V2(3)*(V3(5)*(V4(6)*2D0*(TMP48+TMP49)+(+2D0
     $ *(P3(3)*TMP32+P1(3)*TMP34)-2D0*(P4(3)*TMP36)))+(V3(6)*(V4(5)*(
     $ -2D0)*(TMP48+TMP49)+(+2D0*(P4(2)*TMP36)-2D0*(P3(2)*TMP32+P1(2)
     $ *TMP34)))+(TMP40*2D0*(P3(3)*P1(2)+P2(3)*P4(2)-P3(2)*P1(3)-P2(2)
     $ *P4(3))+(V4(5)*(-2D0)*(P4(3)*TMP24+P2(3)*TMP33-P3(3)*TMP23)+2D0
     $ *(V4(6)*(P4(2)*TMP24+P2(2)*TMP33-P3(2)*TMP23))))))+(V2(5)*(V3(3)
     $ *(V4(6)*(-2D0)*(TMP48+TMP49)+(+2D0*(P4(3)*TMP36)-2D0*(P3(3)
     $ *TMP32+P1(3)*TMP34)))+(V3(6)*(V4(3)*2D0*(TMP48+TMP49)+(+2D0
     $ *(P3(0)*TMP32+P1(0)*TMP34)-2D0*(P4(0)*TMP36)))+(TMP40*2D0*(P3(0)
     $ *P1(3)+P2(0)*P4(3)-P3(3)*P1(0)-P2(3)*P4(0))+(V4(3)*2D0*(P4(3)
     $ *TMP24+P2(3)*TMP33-P3(3)*TMP23)-2D0*(V4(6)*(P4(0)*TMP24+P2(0)
     $ *TMP33-P3(0)*TMP23))))))+(V2(6)*(V3(3)*(V4(5)*2D0*(TMP48+TMP49)
     $ +(+2D0*(P3(2)*TMP32+P1(2)*TMP34)-2D0*(P4(2)*TMP36)))+(V3(5)
     $ *(V4(3)*(-2D0)*(TMP48+TMP49)+(+2D0*(P4(0)*TMP36)-2D0*(P3(0)
     $ *TMP32+P1(0)*TMP34)))+(TMP40*2D0*(P3(2)*P1(0)+P2(2)*P4(0)-P3(0)
     $ *P1(2)-P2(0)*P4(2))+(V4(3)*(-2D0)*(P4(2)*TMP24+P2(2)*TMP33-P3(2)
     $ *TMP23)+2D0*(V4(5)*(P4(0)*TMP24+P2(0)*TMP33-P3(0)*TMP23))))))
     $ +(TMP28*(V4(3)*2D0*(P3(2)*P1(3)+P2(3)*P4(2)-P3(3)*P1(2)-P2(2)
     $ *P4(3))+(V4(5)*2D0*(P3(3)*P1(0)+P2(0)*P4(3)-P3(0)*P1(3)-P2(3)
     $ *P4(0))+2D0*(V4(6)*(P3(0)*P1(2)+P2(2)*P4(0)-P3(2)*P1(0)-P2(0)
     $ *P4(2)))))+(V3(3)*(V4(5)*2D0*(P3(3)*TMP25+P1(3)*TMP27-P2(3)
     $ *TMP35)+(V4(6)*(-2D0)*(P3(2)*TMP25+P1(2)*TMP27-P2(2)*TMP35)+2D0
     $ *(TMP37*(P2(3)*P4(2)-P2(2)*P4(3)))))+(V3(5)*(V4(3)*(-2D0)*(P3(3)
     $ *TMP25+P1(3)*TMP27-P2(3)*TMP35)+(V4(6)*2D0*(P3(0)*TMP25+P1(0)
     $ *TMP27-P2(0)*TMP35)+2D0*(TMP37*(P2(0)*P4(3)-P2(3)*P4(0)))))
     $ +(V3(6)*(V4(3)*2D0*(P3(2)*TMP25+P1(2)*TMP27-P2(2)*TMP35)+(V4(5)
     $ *(-2D0)*(P3(0)*TMP25+P1(0)*TMP27-P2(0)*TMP35)+2D0*(TMP37*(P2(2)
     $ *P4(0)-P2(0)*P4(2)))))+(V2(4)*(TMP56+TMP57-TMP55-TMP58)+(V4(4)
     $ *(TMP63+TMP64-TMP61-TMP62)+(V3(4)*(TMP60-TMP59)+(+2D0*(P3(1)
     $ *TMP53)-2D0*(P2(1)*TMP52+P4(1)*TMP54))))))))))))
      V1(5)= DENOM*CI*(V2(3)*(V3(4)*(V4(6)*(-2D0)*(TMP48+TMP49)+(+2D0
     $ *(P4(3)*TMP36)-2D0*(P3(3)*TMP32+P1(3)*TMP34)))+(V3(6)*(V4(4)
     $ *2D0*(TMP48+TMP49)+(+2D0*(P3(1)*TMP32+P1(1)*TMP34)-2D0*(P4(1)
     $ *TMP36)))+(TMP40*2D0*(P3(1)*P1(3)+P2(1)*P4(3)-P3(3)*P1(1)-P2(3)
     $ *P4(1))+(V4(4)*2D0*(P4(3)*TMP24+P2(3)*TMP33-P3(3)*TMP23)-2D0
     $ *(V4(6)*(P4(1)*TMP24+P2(1)*TMP33-P3(1)*TMP23))))))+(V2(4)*(V3(3)
     $ *(V4(6)*2D0*(TMP48+TMP49)+(+2D0*(P3(3)*TMP32+P1(3)*TMP34)-2D0
     $ *(P4(3)*TMP36)))+(V3(6)*(V4(3)*(-2D0)*(TMP48+TMP49)+(+2D0*(P4(0)
     $ *TMP36)-2D0*(P3(0)*TMP32+P1(0)*TMP34)))+(TMP40*2D0*(P3(3)*P1(0)
     $ +P2(3)*P4(0)-P3(0)*P1(3)-P2(0)*P4(3))+(V4(3)*(-2D0)*(P4(3)
     $ *TMP24+P2(3)*TMP33-P3(3)*TMP23)+2D0*(V4(6)*(P4(0)*TMP24+P2(0)
     $ *TMP33-P3(0)*TMP23))))))+(V2(6)*(V3(3)*(V4(4)*(-2D0)*(TMP48
     $ +TMP49)+(+2D0*(P4(1)*TMP36)-2D0*(P3(1)*TMP32+P1(1)*TMP34)))
     $ +(V3(4)*(V4(3)*2D0*(TMP48+TMP49)+(+2D0*(P3(0)*TMP32+P1(0)*TMP34)
     $ -2D0*(P4(0)*TMP36)))+(TMP40*2D0*(P3(0)*P1(1)+P2(0)*P4(1)-P3(1)
     $ *P1(0)-P2(1)*P4(0))+(V4(3)*2D0*(P4(1)*TMP24+P2(1)*TMP33-P3(1)
     $ *TMP23)-2D0*(V4(4)*(P4(0)*TMP24+P2(0)*TMP33-P3(0)*TMP23))))))
     $ +(TMP28*(V4(3)*2D0*(P3(3)*P1(1)+P2(1)*P4(3)-P3(1)*P1(3)-P2(3)
     $ *P4(1))+(V4(4)*2D0*(P3(0)*P1(3)+P2(3)*P4(0)-P3(3)*P1(0)-P2(0)
     $ *P4(3))+2D0*(V4(6)*(P3(1)*P1(0)+P2(0)*P4(1)-P3(0)*P1(1)-P2(1)
     $ *P4(0)))))+(V3(3)*(V4(4)*(-2D0)*(P3(3)*TMP25+P1(3)*TMP27-P2(3)
     $ *TMP35)+(V4(6)*2D0*(P3(1)*TMP25+P1(1)*TMP27-P2(1)*TMP35)+2D0
     $ *(TMP37*(P2(1)*P4(3)-P2(3)*P4(1)))))+(V3(4)*(V4(3)*2D0*(P3(3)
     $ *TMP25+P1(3)*TMP27-P2(3)*TMP35)+(V4(6)*(-2D0)*(P3(0)*TMP25+P1(0)
     $ *TMP27-P2(0)*TMP35)+2D0*(TMP37*(P2(3)*P4(0)-P2(0)*P4(3)))))
     $ +(V3(6)*(V4(3)*(-2D0)*(P3(1)*TMP25+P1(1)*TMP27-P2(1)*TMP35)
     $ +(V4(4)*2D0*(P3(0)*TMP25+P1(0)*TMP27-P2(0)*TMP35)+2D0*(TMP37
     $ *(P2(0)*P4(1)-P2(1)*P4(0)))))+(V2(5)*(TMP56+TMP57-TMP55-TMP58)
     $ +(V4(5)*(TMP63+TMP64-TMP61-TMP62)+(V3(5)*(TMP60-TMP59)+(+2D0
     $ *(P3(2)*TMP53)-2D0*(P2(2)*TMP52+P4(2)*TMP54))))))))))))
      V1(6)= DENOM*CI*(V2(3)*(V3(4)*(V4(5)*2D0*(TMP48+TMP49)+(+2D0
     $ *(P3(2)*TMP32+P1(2)*TMP34)-2D0*(P4(2)*TMP36)))+(V3(5)*(V4(4)*(
     $ -2D0)*(TMP48+TMP49)+(+2D0*(P4(1)*TMP36)-2D0*(P3(1)*TMP32+P1(1)
     $ *TMP34)))+(TMP40*2D0*(P3(2)*P1(1)+P2(2)*P4(1)-P3(1)*P1(2)-P2(1)
     $ *P4(2))+(V4(4)*(-2D0)*(P4(2)*TMP24+P2(2)*TMP33-P3(2)*TMP23)+2D0
     $ *(V4(5)*(P4(1)*TMP24+P2(1)*TMP33-P3(1)*TMP23))))))+(V2(4)*(V3(3)
     $ *(V4(5)*(-2D0)*(TMP48+TMP49)+(+2D0*(P4(2)*TMP36)-2D0*(P3(2)
     $ *TMP32+P1(2)*TMP34)))+(V3(5)*(V4(3)*2D0*(TMP48+TMP49)+(+2D0
     $ *(P3(0)*TMP32+P1(0)*TMP34)-2D0*(P4(0)*TMP36)))+(TMP40*2D0*(P3(0)
     $ *P1(2)+P2(0)*P4(2)-P3(2)*P1(0)-P2(2)*P4(0))+(V4(3)*2D0*(P4(2)
     $ *TMP24+P2(2)*TMP33-P3(2)*TMP23)-2D0*(V4(5)*(P4(0)*TMP24+P2(0)
     $ *TMP33-P3(0)*TMP23))))))+(V2(5)*(V3(3)*(V4(4)*2D0*(TMP48+TMP49)
     $ +(+2D0*(P3(1)*TMP32+P1(1)*TMP34)-2D0*(P4(1)*TMP36)))+(V3(4)
     $ *(V4(3)*(-2D0)*(TMP48+TMP49)+(+2D0*(P4(0)*TMP36)-2D0*(P3(0)
     $ *TMP32+P1(0)*TMP34)))+(TMP40*2D0*(P3(1)*P1(0)+P2(1)*P4(0)-P3(0)
     $ *P1(1)-P2(0)*P4(1))+(V4(3)*(-2D0)*(P4(1)*TMP24+P2(1)*TMP33-P3(1)
     $ *TMP23)+2D0*(V4(4)*(P4(0)*TMP24+P2(0)*TMP33-P3(0)*TMP23))))))
     $ +(TMP28*(V4(3)*2D0*(P3(1)*P1(2)+P2(2)*P4(1)-P3(2)*P1(1)-P2(1)
     $ *P4(2))+(V4(4)*2D0*(P3(2)*P1(0)+P2(0)*P4(2)-P3(0)*P1(2)-P2(2)
     $ *P4(0))+2D0*(V4(5)*(P3(0)*P1(1)+P2(1)*P4(0)-P3(1)*P1(0)-P2(0)
     $ *P4(1)))))+(V3(3)*(V4(4)*2D0*(P3(2)*TMP25+P1(2)*TMP27-P2(2)
     $ *TMP35)+(V4(5)*(-2D0)*(P3(1)*TMP25+P1(1)*TMP27-P2(1)*TMP35)+2D0
     $ *(TMP37*(P2(2)*P4(1)-P2(1)*P4(2)))))+(V3(4)*(V4(3)*(-2D0)*(P3(2)
     $ *TMP25+P1(2)*TMP27-P2(2)*TMP35)+(V4(5)*2D0*(P3(0)*TMP25+P1(0)
     $ *TMP27-P2(0)*TMP35)+2D0*(TMP37*(P2(0)*P4(2)-P2(2)*P4(0)))))
     $ +(V3(5)*(V4(3)*2D0*(P3(1)*TMP25+P1(1)*TMP27-P2(1)*TMP35)+(V4(4)
     $ *(-2D0)*(P3(0)*TMP25+P1(0)*TMP27-P2(0)*TMP35)+2D0*(TMP37*(P2(1)
     $ *P4(0)-P2(0)*P4(1)))))+(V2(6)*(TMP56+TMP57-TMP55-TMP58)+(V4(6)
     $ *(TMP63+TMP64-TMP61-TMP62)+(V3(6)*(TMP60-TMP59)+(+2D0*(P3(3)
     $ *TMP53)-2D0*(P2(3)*TMP52+P4(3)*TMP54))))))))))))
      END


