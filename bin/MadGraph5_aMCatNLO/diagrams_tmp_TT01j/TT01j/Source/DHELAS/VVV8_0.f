C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     -2*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) -
C      2*Epsilon(1,2,3,-2)*P(-2,2)*P(-1,1)*P(-1,3) -
C      2*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(-1,3) +
C      2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) +
C      2*Epsilon(2,3,-1,-2)*P(-2,2)*P(-1,1)*P(1,3) -
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) -
C      2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) +
C      2*Epsilon(1,2,-1,-2)*P(-2,2)*P(-1,3)*P(3,1) +
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) +
C      Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(1,2) -
C      Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,2) -
C      Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV8_0(V1, V2, V3, COUP,VERTEX)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 TMP61
      COMPLEX*16 TMP78
      REAL*8 P3(0:3)
      COMPLEX*16 TMP82
      COMPLEX*16 TMP71
      COMPLEX*16 TMP28
      COMPLEX*16 TMP75
      COMPLEX*16 TMP69
      COMPLEX*16 V3(*)
      COMPLEX*16 TMP79
      REAL*8 P2(0:3)
      COMPLEX*16 TMP81
      COMPLEX*16 TMP72
      COMPLEX*16 TMP24
      COMPLEX*16 V2(*)
      COMPLEX*16 TMP76
      REAL*8 P1(0:3)
      COMPLEX*16 TMP80
      COMPLEX*16 TMP23
      COMPLEX*16 TMP30
      COMPLEX*16 TMP68
      COMPLEX*16 TMP73
      COMPLEX*16 TMP27
      COMPLEX*16 TMP48
      COMPLEX*16 V1(*)
      COMPLEX*16 TMP77
      COMPLEX*16 TMP38
      COMPLEX*16 TMP22
      COMPLEX*16 COUP
      COMPLEX*16 TMP70
      COMPLEX*16 TMP26
      COMPLEX*16 TMP29
      COMPLEX*16 TMP25
      COMPLEX*16 VERTEX
      COMPLEX*16 TMP74
      P1(0) = DBLE(V1(1))
      P1(1) = DBLE(V1(2))
      P1(2) = DIMAG(V1(2))
      P1(3) = DIMAG(V1(1))
      P2(0) = DBLE(V2(1))
      P2(1) = DBLE(V2(2))
      P2(2) = DIMAG(V2(2))
      P2(3) = DIMAG(V2(1))
      P3(0) = DBLE(V3(1))
      P3(1) = DBLE(V3(2))
      P3(2) = DIMAG(V3(2))
      P3(3) = DIMAG(V3(1))
      TMP68 = (-1D0)*(P3(0)*(V1(4)*(V3(6)*V2(5)-V3(5)*V2(6))+(V1(5)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+V1(6)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P3(1)*(V1(3)*(V3(5)*V2(6)-V3(6)*V2(5))+(V1(5)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+V1(6)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P3(2)*(V1(3)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(V1(4)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +V1(6)*(V3(4)*V2(3)-V3(3)*V2(4))))+P3(3)*(V1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(V1(4)*(V3(5)*V2(3)-V3(3)*V2(5))+V1(5)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP69 = (P1(0)*P2(0)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3))
      TMP26 = (V3(3)*V1(3)-V3(4)*V1(4)-V3(5)*V1(5)-V3(6)*V1(6))
      TMP27 = (P3(0)*V2(3)-P3(1)*V2(4)-P3(2)*V2(5)-P3(3)*V2(6))
      TMP22 = (V2(3)*V1(3)-V2(4)*V1(4)-V2(5)*V1(5)-V2(6)*V1(6))
      TMP23 = (V3(3)*P1(0)-V3(4)*P1(1)-V3(5)*P1(2)-V3(6)*P1(3))
      TMP61 = (-1D0)*(P1(0)*(P3(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P3(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P3(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P3(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P3(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P3(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P3(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P3(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P3(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P3(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP48 = (P3(0)*P1(0)-P3(1)*P1(1)-P3(2)*P1(2)-P3(3)*P1(3))
      TMP28 = (V3(3)*V2(3)-V3(4)*V2(4)-V3(5)*V2(5)-V3(6)*V2(6))
      TMP29 = (P2(0)*V1(3)-P2(1)*V1(4)-P2(2)*V1(5)-P2(3)*V1(6))
      TMP82 = (-1D0)*(P1(0)*(P2(1)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+P2(3)*(P3(1)*V1(5)-P3(2)*V1(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)*(P3(0)*V1(6)
     $ -P3(3)*V1(3))+P2(3)*(P3(2)*V1(3)-P3(0)*V1(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+(P2(1)*(P3(3)*V1(3)-P3(0)*V1(6))
     $ +P2(3)*(P3(0)*V1(4)-P3(1)*V1(3))))+P1(3)*(P2(0)*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*(P3(0)*V1(5)-P3(2)*V1(3))+P2(2)*(P3(1)
     $ *V1(3)-P3(0)*V1(4)))))))
      TMP80 = (-1D0)*(P1(0)*(P2(1)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+P2(3)*(P3(2)*V2(4)-P3(1)*V2(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)*(P3(3)*V2(3)
     $ -P3(0)*V2(6))+P2(3)*(P3(0)*V2(5)-P3(2)*V2(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+(P2(1)*(P3(0)*V2(6)-P3(3)*V2(3))
     $ +P2(3)*(P3(1)*V2(3)-P3(0)*V2(4))))+P1(3)*(P2(0)*(P3(1)*V2(5)
     $ -P3(2)*V2(4))+(P2(1)*(P3(2)*V2(3)-P3(0)*V2(5))+P2(2)*(P3(0)
     $ *V2(4)-P3(1)*V2(3)))))))
      TMP81 = (-1D0)*(P1(0)*(P2(1)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+P2(3)*(P3(2)*V1(4)-P3(1)*V1(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)*(P3(3)*V1(3)
     $ -P3(0)*V1(6))+P2(3)*(P3(0)*V1(5)-P3(2)*V1(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+(P2(1)*(P3(0)*V1(6)-P3(3)*V1(3))
     $ +P2(3)*(P3(1)*V1(3)-P3(0)*V1(4))))+P1(3)*(P2(0)*(P3(1)*V1(5)
     $ -P3(2)*V1(4))+(P2(1)*(P3(2)*V1(3)-P3(0)*V1(5))+P2(2)*(P3(0)
     $ *V1(4)-P3(1)*V1(3)))))))
      TMP24 = (V3(3)*P2(0)-V3(4)*P2(1)-V3(5)*P2(2)-V3(6)*P2(3))
      TMP79 = (-1D0)*(P1(0)*(P2(1)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+P2(3)*(P3(1)*V2(5)-P3(2)*V2(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)*(P3(0)*V2(6)
     $ -P3(3)*V2(3))+P2(3)*(P3(2)*V2(3)-P3(0)*V2(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+(P2(1)*(P3(3)*V2(3)-P3(0)*V2(6))
     $ +P2(3)*(P3(0)*V2(4)-P3(1)*V2(3))))+P1(3)*(P2(0)*(P3(2)*V2(4)
     $ -P3(1)*V2(5))+(P2(1)*(P3(0)*V2(5)-P3(2)*V2(3))+P2(2)*(P3(1)
     $ *V2(3)-P3(0)*V2(4)))))))
      TMP78 = (-1D0)*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP77 = (-1D0)*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP76 = (-1D0)*(P1(0)*(P3(1)*(V2(6)*V1(5)-V2(5)*V1(6))+(P3(2)
     $ *(V2(4)*V1(6)-V2(6)*V1(4))+P3(3)*(V2(5)*V1(4)-V2(4)*V1(5))))
     $ +(P1(1)*(P3(0)*(V2(5)*V1(6)-V2(6)*V1(5))+(P3(2)*(V2(6)*V1(3)
     $ -V2(3)*V1(6))+P3(3)*(V2(3)*V1(5)-V2(5)*V1(3))))+(P1(2)*(P3(0)
     $ *(V2(6)*V1(4)-V2(4)*V1(6))+(P3(1)*(V2(3)*V1(6)-V2(6)*V1(3))
     $ +P3(3)*(V2(4)*V1(3)-V2(3)*V1(4))))+P1(3)*(P3(0)*(V2(4)*V1(5)
     $ -V2(5)*V1(4))+(P3(1)*(V2(5)*V1(3)-V2(3)*V1(5))+P3(2)*(V2(3)
     $ *V1(4)-V2(4)*V1(3)))))))
      TMP75 = (-1D0)*(P2(0)*(P3(1)*(V2(6)*V1(5)-V2(5)*V1(6))+(P3(2)
     $ *(V2(4)*V1(6)-V2(6)*V1(4))+P3(3)*(V2(5)*V1(4)-V2(4)*V1(5))))
     $ +(P2(1)*(P3(0)*(V2(5)*V1(6)-V2(6)*V1(5))+(P3(2)*(V2(6)*V1(3)
     $ -V2(3)*V1(6))+P3(3)*(V2(3)*V1(5)-V2(5)*V1(3))))+(P2(2)*(P3(0)
     $ *(V2(6)*V1(4)-V2(4)*V1(6))+(P3(1)*(V2(3)*V1(6)-V2(6)*V1(3))
     $ +P3(3)*(V2(4)*V1(3)-V2(3)*V1(4))))+P2(3)*(P3(0)*(V2(4)*V1(5)
     $ -V2(5)*V1(4))+(P3(1)*(V2(5)*V1(3)-V2(3)*V1(5))+P3(2)*(V2(3)
     $ *V1(4)-V2(4)*V1(3)))))))
      TMP74 = (-1D0)*(P1(0)*(P2(1)*(V3(6)*V1(5)-V3(5)*V1(6))+(P2(2)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+P2(3)*(V3(5)*V1(4)-V3(4)*V1(5))))
     $ +(P1(1)*(P2(0)*(V3(5)*V1(6)-V3(6)*V1(5))+(P2(2)*(V3(6)*V1(3)
     $ -V3(3)*V1(6))+P2(3)*(V3(3)*V1(5)-V3(5)*V1(3))))+(P1(2)*(P2(0)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+(P2(1)*(V3(3)*V1(6)-V3(6)*V1(3))
     $ +P2(3)*(V3(4)*V1(3)-V3(3)*V1(4))))+P1(3)*(P2(0)*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P2(1)*(V3(5)*V1(3)-V3(3)*V1(5))+P2(2)*(V3(3)
     $ *V1(4)-V3(4)*V1(3)))))))
      TMP73 = (-1D0)*(P2(0)*(P3(1)*(V3(5)*V1(6)-V3(6)*V1(5))+(P3(2)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+P3(3)*(V3(4)*V1(5)-V3(5)*V1(4))))
     $ +(P2(1)*(P3(0)*(V3(6)*V1(5)-V3(5)*V1(6))+(P3(2)*(V3(3)*V1(6)
     $ -V3(6)*V1(3))+P3(3)*(V3(5)*V1(3)-V3(3)*V1(5))))+(P2(2)*(P3(0)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+(P3(1)*(V3(6)*V1(3)-V3(3)*V1(6))
     $ +P3(3)*(V3(3)*V1(4)-V3(4)*V1(3))))+P2(3)*(P3(0)*(V3(5)*V1(4)
     $ -V3(4)*V1(5))+(P3(1)*(V3(3)*V1(5)-V3(5)*V1(3))+P3(2)*(V3(4)
     $ *V1(3)-V3(3)*V1(4)))))))
      TMP72 = (-1D0)*(P1(0)*(P2(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P2(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P2(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P2(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P2(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P2(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P2(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P2(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P2(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P2(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP71 = (-1D0)*(P1(0)*(V1(4)*(V3(6)*V2(5)-V3(5)*V2(6))+(V1(5)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+V1(6)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(V1(3)*(V3(5)*V2(6)-V3(6)*V2(5))+(V1(5)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+V1(6)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(V1(3)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(V1(4)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +V1(6)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(V1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(V1(4)*(V3(5)*V2(3)-V3(3)*V2(5))+V1(5)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP70 = (-1D0)*(P2(0)*(V1(4)*(V3(6)*V2(5)-V3(5)*V2(6))+(V1(5)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+V1(6)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P2(1)*(V1(3)*(V3(5)*V2(6)-V3(6)*V2(5))+(V1(5)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+V1(6)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P2(2)*(V1(3)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(V1(4)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +V1(6)*(V3(4)*V2(3)-V3(3)*V2(4))))+P2(3)*(V1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(V1(4)*(V3(5)*V2(3)-V3(3)*V2(5))+V1(5)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP38 = (P3(0)*P2(0)-P3(1)*P2(1)-P3(2)*P2(2)-P3(3)*P2(3))
      TMP25 = (P1(0)*V2(3)-P1(1)*V2(4)-P1(2)*V2(5)-P1(3)*V2(6))
      TMP30 = (P3(0)*V1(3)-P3(1)*V1(4)-P3(2)*V1(5)-P3(3)*V1(6))
      VERTEX = COUP*2D0*(TMP22*1D0/2D0*(-CI*(TMP77)+CI*(TMP78))+(TMP26
     $ *1D0/2D0*(-CI*(TMP80)+CI*(TMP79))+(TMP28*1D0/2D0*(-CI*(TMP81)
     $ +CI*(TMP82))+(-CI*(TMP29*TMP61+TMP30*TMP72+TMP23*TMP75+TMP24
     $ *TMP76)+CI*(TMP68*TMP69+TMP48*TMP70+TMP38*TMP71+TMP25*TMP73
     $ +TMP27*TMP74)))))
      END


